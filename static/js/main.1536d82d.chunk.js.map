{"version":3,"sources":["components/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["DrumMachine","props","id","text","onClick","clickController","className","src","App","state","keyInput","handleClick","bind","handleKeyPress","playSound","document","addEventListener","event","removeEventListener","val","target","innerText","this","setState","key","sound","getElementById","currentTime","play","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1536d82d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DrumMachine = (props)=> {\r\n    return (\r\n        <div id=\"drum-machine\">\r\n            <h1>{props.text}</h1>\r\n            <div id=\"display\" onClick={props.clickController}>\r\n                \r\n                <div className=\"drum-pad\" id=\"audio_1\">\r\n                    Q\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\" id=\"Q\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_2\">\r\n                    W\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\" id=\"W\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_3\">\r\n                    E\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\" id=\"E\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_4\">\r\n                    A\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\" id=\"A\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_5\">\r\n                    S\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\" id=\"S\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_6\">\r\n                    D\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\" id=\"D\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_7\">\r\n                    Z\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\" id=\"Z\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_8\">\r\n                    X\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\" id=\"X\" className=\"clip\"></audio>\r\n                </div>\r\n                <div className=\"drum-pad\" id=\"audio_9\">\r\n                    C\r\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\" id=\"C\" className=\"clip\"></audio>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrumMachine;","import React from 'react';\nimport DrumMachine from './components/DrumMachine';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      keyInput: 'Click or press keys to play.'\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.playSound = this.playSound.bind(this);\n  }\n\n  componentDidMount(){\n    document.addEventListener('keypress', (event)=>{\n      this.handleKeyPress(event);\n    });\n  }\n  componentWillUnmount(){\n    document.removeEventListener('keypress', (event)=>{\n      this.handleKeyPress(event);\n    });\n  }\n\n  handleClick(event){\n    const val = event.target.innerText;\n    this.playSound(val);\n    this.setState({\n      keyInput: val\n    })\n  }\n  handleKeyPress(event){\n    const val = event.key;\n    this.playSound(val);\n    this.setState({\n      keyInput: val\n    })\n  }\n  playSound(key){\n    let sound;\n    switch(key){\n      case 'Q':\n      case 'q': \n        sound = document.getElementById('Q');\n        break;\n      case 'W':\n      case 'w': \n        sound = document.getElementById('W');\n        break;\n      case 'E':\n      case 'e': \n        sound = document.getElementById('E');\n        break;  \n      case 'A':\n      case 'a': \n        sound = document.getElementById('A');\n        break; \n      case 'S':\n      case 's': \n        sound = document.getElementById('S');\n        break; \n      case 'D':\n      case 'd': \n        sound = document.getElementById('D');\n        break; \n      case 'Z':\n      case 'z': \n        sound = document.getElementById('Z');\n        break; \n      case 'X':\n      case 'x': \n        sound = document.getElementById('X');\n        break; \n      case 'C':\n      case 'c': \n        sound = document.getElementById('C');\n        break;                   \n      default: return;\n    }\n    sound.currentTime = 0;\n    sound.play();\n    \n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <DrumMachine text={this.state.keyInput} \n        clickController={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}